Netty is composed of three components - buffer, channel, event model

**ChannelHandlerContext is important interface, its function is that enables a channelHandler to interact with
its ChannelPipeline

From FirstNettyServer, we will find a simple httpServer, but I have some questions, like these:
1. we add HttpServerCodec to be first, but in FirstNettyServerHandler1, we cannot get request body, Why?
2. About HttpServerCodec, how to parse "stream"?
3. How to define my own "HttpServerHandler",(HttpRequestHandler, HttpResponseHandler)

**About 1
1. we need to understand the "ChannelRead" method of ByteToMessageDecoder
2. we need to understand the decode method of HttpObjectDecoder

ByteToMessageDecoder just simple deal with data

But the decode method of HttpObjectDecoder is that simple parse data except request content I guess in HttpObjectDecoder,
Specific content we have to dig into it.

Because the decode method of HttpObjectDecoder didn't deal with request content, so we have to create "HttpObjectAggregator",
this class parsed request content, let we dig it how to handle request stream.
Now I have two ways, first I dig it HttpServerCodec why it didn't parse requestContext and just parse other data except requestContext,
second I dig HttpObjectAggregator how it parsed requestContext,

So I wanna understand the HttpObjectAggregator, but I have to figure out how the decode method of MessageAggregator works first.
||||||  I continue to study source, or study the process of stream of TCP.

But I still decide to figure out ByteToMessageDecode
Question: In the method of ChannelRead, why have multiple ByteBufs?
three classes 1, ByteToMessageDecoder HttpObjectDecoder HttpServerCodec
HttpObjectDecoder$HeaderParser -->parse 807 byte.foreachBytes
AbstractByteBuf --> foreachByte 1330
AbstractByteBuf --> foreachByteasc0 1350
HttpObjectDecoder$HeaderParser --> process 839
