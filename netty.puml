@startuml
interface EventLoopGroup
class NioEventLoopGroup {
}

note left of NioEventLoopGroup: this is base class
EventLoopGroup <|-- NioEventLoopGroup

abstract AbstractBootstrap {
    -options Map<ChannelOptions<?>, Object>;
}
class ServerBootstrap {
    -childOptions Map<ChannelOptions<?>, Object>;
}
AbstractBootstrap <|-- ServerBootstrap

interface Channel {
    +pipeline()
    +read()
    +flush()
}
interface ServerChannel
interface ServerSocketChannel
note top of ServerSocketChannel: A TCP/IP {@link ServerChannel} which accepts incoming TCP/IP connections.

class NioServerSocketChannel
class OIOServerSocketChannel
class EpollServerSocketChannel
class KQueueServerSocketChannel

Channel <|-- ServerChannel
ServerChannel <|-- ServerSocketChannel
ServerSocketChannel <|.. NioServerSocketChannel
ServerSocketChannel <|.. OIOServerSocketChannel
ServerSocketChannel <|.. EpollServerSocketChannel
ServerSocketChannel <|.. KQueueServerSocketChannel

interface ChannelHandler
class ChannelHandlerAdapter
interface ChannelOutboundHandler
interface ChannelInboundHandler {
    +channelRegistered()
    +channelUnRegistered()
    +channelActive()
    +channelInactive()
    +channelRead()
    +channelReadComplete()
    +userEventTriggered()
    +channelWritabilityChanged()
}
class ChannelOutboundHandlerAdapter

class ChannelInboundHandlerAdapter
class SimpleChannelInboundHandler
abstract class MessageToMessageDecoder
class StringDecoder
class ProtobufDecoder
class HttpContentDecoder
abstract class ByteToMessageDecoder

note right of ChannelInboundHandlerAdapter: In general, we need to implement this or the \n children of this class to deal with our business

ChannelHandler <|.. ChannelHandlerAdapter
ChannelHandler <|-- ChannelOutboundHandler
ChannelHandler <|-- ChannelInboundHandler
ChannelHandlerAdapter <|-- ChannelOutboundHandlerAdapter
ChannelHandlerAdapter <|-- ChannelInboundHandlerAdapter
ChannelInboundHandler <|.. ChannelInboundHandlerAdapter
ChannelOutboundHandler <|.. ChannelOutboundHandlerAdapter
ChannelInboundHandlerAdapter <|-- SimpleChannelInboundHandler
ChannelInboundHandlerAdapter <|-- MessageToMessageDecoder
MessageToMessageDecoder <|-- StringDecoder
MessageToMessageDecoder <|-- ProtobufDecoder
MessageToMessageDecoder <|-- HttpContentDecoder
ChannelInboundHandlerAdapter <|-- ByteToMessageDecoder


@enduml